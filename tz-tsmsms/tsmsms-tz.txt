Техническое задание. Разработка сервиса Tsmsms

Дано

Назначение сервиса - предоставление интерфейса для отправки и чтения SMS.
Сообщения о новых SMS на шину UBUS посылает сервис Tsmodem. Однако, для инженера, который будет настраивать и пользоваться прибором, было бы логично ограничить задачу отправки и получении SMS всего одним сервисом. Поэтому сервис Tsmsms должен дублировать события о поступлении нового SMS.  
Начальная реализация сервиса Tsmsms https://github.com/antoncom/tsmsms. Код из данной реализации может быть взят за основу разработки. 
Низкоуровневая работа с модемом реализована в сервисе Tsmodem. Чтобы не дублировать логику отправки AT-команд в модем и опроса модема, чтение, отправка и стирание SMS должны выполняться посредством передачи AT-команд сервису Tsmodem. Для этого у сервиса Tsmodem есть метод "send_at" на шине UBUS (https://github.com/antoncom/tsmodem/blob/5fb04c3d502fac72d07aab48203e29856a33eb69/src/driver/state.lua#L381)
Спецификация AT-команд модема: https://github.com/antoncom/tsmodem/tree/tsmodem-3.1.0/src/spec
Т.к. AT-команды могут поступать в сервис Tsmodem из разных источников, целесообразноблокировать доступ к сервису Tsmodem средствами межпроцессной синхронизации операционной системы.
Сервис должен иметь процедуру повторной отправки SMS в случае ошибки. Если количество попыток истекло, текст SMS должен быть передан сервису Tsmemail для отправки по Email.Сервис Tsmemail ещё не существует, но обращение к нему следует заложить на перспективу.
Об ошибке отправки SMS необходимо сообщить в Web-UI, а так же сделать запись в системном журнале событий. И то, и другое можно сделать с помощью правил сервиса Applogic. (https://github.com/antoncom/applogic-rules/tree/applogic-3.1.0/src/rule)

Требуется

Сервис должен предоставлять методы на шине UBUS:
    отправить SMS
    получить количество принятых SMS
    прочитать одно SMS по индексу
    прочитать все SMS 
    стереть SMS по индексу
    стереть все SMS

Сервис должен генерировать события на шине UBUS:
    новое входящее SMS
    ошибка отправки SMS

Сервис должен иметь конфигурационный файл в UCI. Параметры сервиса:
    количество попыток отправки SMS
    таймаут ожидания ответа от Tsmodem
    отправлять или нет email в случае ошибки
    адрес для отправки email в случае ошибки

Список конфигурационных параметров сервиса может изменяться в ходе разработки.

Документация к сервису должна содержать:
    описание методов и событий на шине UBUS (названия, какие аргументы принимают, что возвращают, что делают)
    структура файла конфигурации с описанием параметров
    примеры использования (типовой файл конфигурации, пример кода, использующий методы Tsmsms)
    выбранный метод межпроцессной синхронизации, как им пользоваться (имя мьютекса, интерфейс к семафорам и т.п. для внедрения в другие сервисы для защиты Tsmodem)

Инструкции

Сервис должен быть реализован используя метод конечных автоматов (Машина состояний). Допускается использование сторонних библиотек, реализующих машину состояний. Диаграмма состояний сервиса прилагается. Допускается вносить изменения и уточнения в диаграмму состояний в ходе разработки.
Сервис должен иметь режим отладки. В режиме отладки сервис должен подробно описыватьсвоё состояние при каждой смене состояния: из какого состояния вышел, в какое пришёл,по какому событию это произошло, внутренние данные состояния, и т.д. Формат отладочной печати в виде таблицы зарекомендовал себя как наиболее удобный (https://github.com/antoncom/tsmodem/blob/tsmodem-3.1.0/src/debug_mode.lua)
Методы межпроцессной синхронизации необходимо изучить и выбрать наиболее подходящий. В качестве отправной точки можно рассматривать следующие варианты:
    - Пример реализации мьютекса на Lua
        - https://stackoverflow.com/questions/28898361/lua-simple-mutex-for-threaded-app
        - https://github.com/xopxe/lumen/blob/master/mutex.lua

    - Написать небольшой сервис на Си, предоставляющий интерфейс к POSIX-семафорам
        - https://www.softprayog.in/programming/posix-semaphores

    - Варианты межпроцессной синхронизации в шелле Linux  
        - https://stackoverflow.com/questions/6870221/is-there-any-mutex-semaphore-mechanism-in-shell-scripts

В дальнейшем выбранный метод должен применяться в других сервисах системы для защиты разделяемых ресурсов от одновременного доступа.
При использовании мьютексов важно понимать, захвачен он уже или отпущен при смене состояний и вызовах функций, которые могут захфатывать мьютексы. Иначе может возникнуть так называемый dead-lock - приложение бесконечно ждёт мьютекс, который само же и захватило, либо два процесса взаимно ждут друг друга.
В случае, когда SMS состоит из нескольких частей, может возникнуть ошибка передачи одной из этих частей. В ходе разработки необходимо определить, целесообразна ли повторная отправка только неудавшейся части, или лучшеотметить всю SMS как неудавшуюся.
